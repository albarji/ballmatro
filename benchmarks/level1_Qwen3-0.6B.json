{
    "total_score": 2556,
    "total_normalized_score": 0.9124182276621301,
    "invalid_hands": 1,
    "normalized_invalid_hands": 0.01282051282051282,
    "scores": [
        {
            "input": [
                "6\u2666+"
            ],
            "played": [
                "6\u2666+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 41,
            "multiplier": 1,
            "score": 41
        },
        {
            "input": [
                "4\u2665+"
            ],
            "played": [
                "4\u2665+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 39,
            "multiplier": 1,
            "score": 39
        },
        {
            "input": [
                "K\u2663"
            ],
            "played": [],
            "remaining": [
                "K\u2663"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "5\u2666x"
            ],
            "played": [
                "5\u2666x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 10,
            "multiplier": 5,
            "score": 50
        },
        {
            "input": [
                "4\u2663+"
            ],
            "played": [
                "4\u2663+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 39,
            "multiplier": 1,
            "score": 39
        },
        {
            "input": [
                "Q\u2660"
            ],
            "played": [
                "Q\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "A\u2660+"
            ],
            "played": [
                "A\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 46,
            "multiplier": 1,
            "score": 46
        },
        {
            "input": [
                "K\u2665x"
            ],
            "played": [
                "K\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 5,
            "score": 75
        },
        {
            "input": [
                "Q\u2665+"
            ],
            "played": [
                "Q\u2665+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "Q\u2665"
            ],
            "played": [
                "Q\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "4\u2663x"
            ],
            "played": [
                "4\u2663x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 9,
            "multiplier": 5,
            "score": 45
        },
        {
            "input": [
                "3\u2665x"
            ],
            "played": [
                "3\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 8,
            "multiplier": 5,
            "score": 40
        },
        {
            "input": [
                "A\u2660"
            ],
            "played": "<think>\nOkay, let's tackle this problem. The user provided a list of cards, and I need to determine which cards to play to maximize the score. The input is a list enclosed in square brackets, with each card represented as rank, suit, and optionally a modifier. The output should be the list of played cards, following the same format.\n\nFirst, I need to understand the scoring rules. The highest priority is the poker hand. If no valid hand is formed, it's considered a No Poker Hand. But even if a No Poker Hand is formed, the play is still considered a No Poker Hand. Similarly, if a card isn't in the input list, it's Invalid. Also, jokers can affect the scoring, but they can't be used in the played cards.\n\nLooking at the example input [A\u2660], the output is [A\u2660]. So when there's only one card, it's the best possible. But what if there are multiple cards? For instance, if there's a card with modifiers and others. \n\nThe key steps are:\n\n1. Check each card to see if it can form a valid poker hand. If not, mark as invalid or no hand.\n2. Select the best hand possible from the valid ones.\n3. Ensure that the selected cards are only those present in the input list.\n4. Output the list of cards in the same format.\n\nLet me think about how to approach this. Since the example given is [A\u2660], the output is that single card. If the input list had multiple cards, like [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663], then output that list. \n\nAnother example is [2\u2666, 3\u2665, 7\u2660, 10\u2665, A\u2660], which outputs [A\u2660]. So when there's only one card, it's the best. \n\nSo the algorithm would be:\n\n- Iterate through each card in the input list.\n- For each card, determine if it can form a valid poker hand.\n- If it can, include it in the output.\n- If not, ignore it.\n- The final output is the list of all valid cards.\n\nWait, but what if there are multiple cards that can form a hand? Like in the example given, [2\u2663, 2\u2666, 2\u2665, 3\u2660, 3\u2665] is a Full House, so output that. But if there's another card that could be part of another hand, which is better, we need to pick that. But according to the problem statement, the output should be the highest scoring hand possible. So the selection process should prioritize the best hand possible.\n\nSo the steps are:\n\n1. Check each card in the input list to see if it can be part of any valid poker hand. If it can, include it in the output.\n2. For each valid card, check if it contributes to the best possible hand.\n3. The output list is the combination of all valid cards.\n\nBut how to determine which cards are valid? The problem says that the played cards must form part of the poker hand. So each card in the input list must be part of at least one valid poker hand.\n\nTherefore, the approach is to check each card in the input list to see if it can be part of any valid poker hand. If it can, include it in the output. The output will contain all valid cards.\n\nBut wait, the example input [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] outputs that same list. So even if there are multiple cards, they are included. \n\nAnother example: if the input list has a card that can form a Straight and another that can form a Flush, but the Straight is better, then include the Straight cards. \n\nSo the process is: for each card in the input list, check if it can form any poker hand. If yes, include it. The output is all such cards.\n\nTherefore, the code needs to process each card in the input list, check if it can be part of any valid poker hand, and collect those cards. Then output them in the same format.\n\nNow, the problem is to implement this logic. Let's think about how to check if a card can form a poker hand. \n\nThe rules are:\n\n- For a card to be part of a poker hand, it must meet the criteria of the hand. For example, a Straight Flush requires five cards of the same suit in consecutive order. \n\nSo for each card, we need to check if it can be part of any of the poker hands. \n\nBut since the input list may contain multiple cards, and each card may or may not be part of a hand, the output will include all such cards.\n\nTherefore, the code can be written as follows:\n\n- Iterate through each card in the input list.\n- For each card, check if it can form a valid poker hand.\n- If yes, include it in the output list.\n- The output list is the collection of all valid cards.\n\nBut how to implement the check for a valid poker hand? For each card, we need to check if it can be part of any of the poker hands. \n\nBut since the problem states that the output is the highest scoring hand possible, perhaps we should prioritize the best hand possible. However, according to the problem statement, the output is the list of played cards, which must form the best possible hand. So the selection is based on the best hand possible.\n\nWait, but the problem says that the output is the list of cards played. So even if there are multiple cards that can form a hand, but one is better, the output includes all of them. \n\nBut how to determine which cards are part of the best hand. For example, if two cards form a Straight and another forms a Full House, which one is better? According to the problem statement, the output should be the highest scoring hand possible. So perhaps the selection is based on the score, not on which hand it is. \n\nWait, the problem says that the output is the highest scoring hand. So perhaps the selection is based on the score, and among those that can form a hand, choose the one with the highest possible score. \n\nBut the problem says that the played cards must form a poker hand. So perhaps the selection is to include all cards that can form a poker hand, regardless of which hand they form. \n\nBut that's conflicting with the examples. Let me check the examples again. \n\nIn the example, [2\u2663, 2\u2666, 2\u2665, 3\u2660, 3\u2665] is a Full House, and the output is that list. Similarly, [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] is the same list. So perhaps the output is the list of all cards present in the input list, regardless of which hand they form. \n\nBut that seems counterintuitive. For example, if there are multiple cards, but the best hand is one that includes all of them, then output all. \n\nBut according to the problem statement, the output is the list of cards to be played. So perhaps the output is the input list, since all cards are valid and part of the best hand. \n\nBut that's not possible. For example, if the input list contains a card that can't form a hand, then it's invalid. \n\nBut according to the problem statement, the output must be the list of played cards. So if the input list has cards that can form a hand, include them. \n\nBut how to check if a card can form a hand. For example, a card that is a Joker might not be part of any hand. \n\nSo the approach is: for each card in the input list, check if it can form any valid poker hand. If yes, include it in the output. \n\nBut how to implement this check. \n\nLet me think about the steps for checking if a card can form a poker hand. For a card to be part of a hand, it must meet the criteria of a poker hand. \n\nSo for each card, we need to check if it can be part of any of the hands. \n\nFor example, a card with rank 10 and suit club can be part of a straight if there are other cards. \n\nBut since the problem allows for any combination of cards, perhaps the best way is to check all possible poker hands and see if the card is part of any. \n\nHowever, since the problem allows for multiple cards, perhaps the selection is to include all cards that can form any valid poker hand, and then output them. \n\nTherefore, the code can process each card in the input list, check if it can form any valid poker hand, and if so, include it in the output. \n\nSo the code would look something like:\n\ncards = input list\nresult = []\nfor card in cards:\n    check if card can form a poker hand\n    if yes:\n        result.append(card)\noutput result\n\nNow, how to implement the check for a card. Let's think about the steps for checking a card:\n\nFor a card to be part of a poker hand, it must satisfy the conditions for any of the poker hands. \n\nFor example, a card that is a Straight Flush (5 cards of the same suit, consecutive order) would satisfy that. \n\nBut since the input list may contain multiple cards, we need to check if any combination of cards in the list can form a hand. \n\nBut since the problem says that the played cards must form a poker hand, and the output is the list of played cards, perhaps the selection is to include all cards in the input list, regardless of which hand they form. \n\nTherefore, the code can simply output the input list, as each card is valid. \n\nBut that would contradict the examples. Let me check the examples again. \n\nIn the first example, [2\u2663, 5\u2665, 5\u2665, J\u2663+, J\u2663] is input. The output is [5\u2665, 5\u2665, J\u2663+, J\u2663]. So all cards are included. \n\nAnother example: [2\u2666, 3\u2665, 7\u2660, 10\u2665, A\u2660] -> output is [A\u2660]. So only the last card is included. \n\nAh, so the output is the list of played cards, but only the ones that are valid. \n\nSo perhaps the code should check if the card can form a poker hand, and if so, include it. \n\nBut how to check if a card can form a poker hand. \n\nLet's think about each card. For each card, check if it can be part of any of the poker hands. \n\nFor example, for a card [A\u2660], it can be part of a High Card, so include it. \n\nFor a card [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663], include all. \n\nBut how to check if a card is part of any hand. \n\nThe steps for checking a card are:\n\n1. Check if it can form a Straight Flush. If yes, include it.\n2. Check if it can form a Four of a Kind. If yes, include.\n3. Check if it can form a Full House. If yes, include.\n4. Check if it can form a Flush. If yes, include.\n5. Check if it can form a Straight. If yes, include.\n6. Check if it can form a Three of a Kind. If yes, include.\n7. Check if it can form a Two Pair. If yes, include.\n8. Check if it can form a Pair. If yes, include.\n9. Check if it can form a High Card. If yes, include.\n10. Else, invalid.\n\nBut since the problem allows for multiple cards, we need to check if the entire set of cards can form a hand. \n\nBut how to check that. \n\nAlternatively, for each card, check if it can be part of any of the poker hands. \n\nBut perhaps the simplest way is to check if the card is part of any of the poker hands. \n\nBut since the problem says that the output is the highest scoring hand possible, perhaps the selection is to include all cards that can form a hand. \n\nBut how to implement this. \n\nAlternatively, since the problem allows for any combination, but the output must be the list of played cards, perhaps the code can simply output the input list, since all cards are valid. \n\nBut that would not match the example where [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] outputs that list. \n\nBut according to the problem statement, the output is the list of cards played. So if all cards in the input list are valid, output them. \n\nBut in the example where the input list is [A\u2660], the output is [A\u2660], which is correct. \n\nAnother example: [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] outputs that list. \n\nSo the code would output the input list. \n\nBut why? Because if all cards in the input list are valid, then output them. \n\nBut what if there are cards that are not part of any poker hand? For example, if the input list has a card that is a Joker, which is invalid. \n\nSo the code should check each card to see if it is part of any valid poker hand. \n\nTherefore, the steps are:\n\n1. Check each card in the input list to see if it can form any valid poker hand.\n2. If it can, include it in the output list.\n3. Output the list.\n\nBut how to implement this. \n\nLet's think about the code. \n\nIn Python, for each card, we can check if it can form any of the poker hands. \n\nBut since the problem allows for any combination, perhaps the code can check for each card if it can form any of the poker hands. \n\nBut how to implement that. \n\nAlternatively, perhaps the code can just output the input list, since all cards are valid. \n\nBut that would not work for the examples. \n\nWait, let's look at the example [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663]. The output is the same list. So in this case, all cards are valid. \n\nAnother example: [2\u2666, 3\u2665, 7\u2660, 10\u2665, A\u2660] outputs [A\u2660]. So only the last card is included. \n\nThis suggests that the output is not the input list, but only the cards that are part of the best hand. \n\nTherefore, the code needs to check which cards are part of the best possible hand. \n\nBut how to determine which cards are part of the best hand. \n\nThe problem says that the output is the list of played cards, which form the best possible hand. \n\nSo the selection is based on the best hand possible. \n\nBut how to determine which hand is best. \n\nThe problem states that the highest priority is the poker hand. So if multiple cards can form a hand, the one with the highest priority is selected. \n\nBut according to the problem's example, when playing [2\u2663, 2\u2666, 2\u2665, 3\u2660, 3\u2665], it's considered a Full House, even though there's a Three of a Kind and a Pair. \n\nThis suggests that the selection is based on the poker hand. So the best hand is the one with the highest priority. \n\nTherefore, the code needs to check all possible poker hands and select the best one. \n\nBut since the input list may have multiple cards, and the best hand is the one that includes as many cards as possible, the code needs to check all possible poker hands and select the one that maximizes the score. \n\nBut this seems complicated. \n\nAlternatively, perhaps the code can simply output the input list, as each card is valid. \n\nBut why does the example show that when [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] is input, the output is the same list. \n\nThis suggests that the output is the input list. \n\nTherefore, the code can simply output the input list. \n\nBut this would not explain the example where [A\u2660] is the input and the output is [A\u2660]. \n\nSo perhaps the code can just output the input list. \n\nBut why does the example [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] output the same list? Because all cards are valid, and they form a valid hand. \n\nTherefore, the code can simply output the input list. \n\nBut this seems to contradict some examples. \n\nWait, looking back at the problem statement: \n\nThe input list may contain special jokers. But when played, they are considered invalid. \n\nBut according to the example, [A\u2660] is the output. \n\nSo perhaps the code can simply output the input list. \n\nTherefore, the code would read the list and output it. \n\nBut that would not make sense. Because if there are multiple cards, but they don't form a valid hand, then they are invalid and not included. \n\nBut the problem says that the output is the list of played cards. So perhaps the code needs to check if each card is part of any valid poker hand. \n\nBut how to check that. \n\nLet me think again. \n\nThe problem says that the played cards must form part of a poker hand. So each card in the input list must be part of at least one valid poker hand. \n\nTherefore, the code needs to check if each card can form any valid poker hand. \n\nBut how to implement that. \n\nLet's take the first example: [2\u2663, 5\u2665, 5\u2665, J\u2663+, J\u2663]. \n\nThe output is [5\u2665, 5\u2665, J\u2663+, J\u2663]. \n\nSo all cards are valid. \n\nThe second example: [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663] outputs the same list. \n\nSo perhaps the code can simply output the input list, as all cards are valid. \n\nBut why does the example where [2\u2666, 3\u2665, 7\u2660, 10\u2665, A\u2660] outputs [A\u2660]? Because only the last card is valid. \n\nAh, so the code must check if each card can form a valid poker hand. \n\nSo the code needs to process each card in the input list, check if it can form a valid poker hand, and if so, include it in the output. \n\nBut how to implement this. \n\nLet's think about the steps for each card:\n\nFor each card, determine if it can form any of the poker hands. \n\nFor example, for a card [A\u2660], it can form a High Card. \n\nFor a card [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663], it can form a Straight Flush. \n\nSo the code needs to check for all possible poker hands. \n\nBut how to implement this. \n\nPerhaps for each card, check if it can be part of any of the poker hands. \n\nBut since the problem allows for any combination, perhaps the code can check if the card is part of any of the poker hands. \n\nBut how to check that. \n\nAn alternative approach is to check if the card is part of any valid hand. \n\nFor example, for a card [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663], it can form a Straight. \n\nBut for a card [2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663,",
            "remaining": null,
            "hand": "Invalid Play",
            "chips": 0,
            "multiplier": 0,
            "score": 0
        },
        {
            "input": [
                "10\u2663"
            ],
            "played": [
                "10\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "3\u2660"
            ],
            "played": [
                "3\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 8,
            "multiplier": 1,
            "score": 8
        },
        {
            "input": [
                "K\u2665"
            ],
            "played": [
                "K\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "J\u2660x"
            ],
            "played": [
                "J\u2660x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 5,
            "score": 75
        },
        {
            "input": [
                "9\u2660x"
            ],
            "played": [],
            "remaining": [
                "9\u2660x"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "7\u2665x"
            ],
            "played": [
                "7\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 12,
            "multiplier": 5,
            "score": 60
        },
        {
            "input": [
                "3\u2663"
            ],
            "played": [
                "3\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 8,
            "multiplier": 1,
            "score": 8
        },
        {
            "input": [
                "10\u2663+"
            ],
            "played": [
                "10\u2663+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "2\u2665"
            ],
            "played": [
                "2\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 7,
            "multiplier": 1,
            "score": 7
        },
        {
            "input": [
                "A\u2663x"
            ],
            "played": [
                "A\u2663x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 16,
            "multiplier": 5,
            "score": 80
        },
        {
            "input": [
                "J\u2666x"
            ],
            "played": [
                "J\u2666x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 5,
            "score": 75
        },
        {
            "input": [
                "3\u2663+"
            ],
            "played": [
                "3\u2663+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 38,
            "multiplier": 1,
            "score": 38
        },
        {
            "input": [
                "A\u2663+"
            ],
            "played": [
                "A\u2663+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 46,
            "multiplier": 1,
            "score": 46
        },
        {
            "input": [
                "7\u2666x"
            ],
            "played": [],
            "remaining": [
                "7\u2666x"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "8\u2663x"
            ],
            "played": [
                "8\u2663x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 5,
            "score": 65
        },
        {
            "input": [
                "4\u2665"
            ],
            "played": [
                "4\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 9,
            "multiplier": 1,
            "score": 9
        },
        {
            "input": [
                "4\u2666+"
            ],
            "played": [
                "4\u2666+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 39,
            "multiplier": 1,
            "score": 39
        },
        {
            "input": [
                "7\u2666"
            ],
            "played": [
                "7\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 12,
            "multiplier": 1,
            "score": 12
        },
        {
            "input": [
                "9\u2666x"
            ],
            "played": [
                "9\u2666x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 14,
            "multiplier": 5,
            "score": 70
        },
        {
            "input": [
                "2\u2663x"
            ],
            "played": [
                "2\u2663x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 7,
            "multiplier": 5,
            "score": 35
        },
        {
            "input": [
                "6\u2660"
            ],
            "played": [
                "6\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 11,
            "multiplier": 1,
            "score": 11
        },
        {
            "input": [
                "J\u2666"
            ],
            "played": [
                "J\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "7\u2660"
            ],
            "played": [
                "7\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 12,
            "multiplier": 1,
            "score": 12
        },
        {
            "input": [
                "K\u2660"
            ],
            "played": [
                "K\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "8\u2660"
            ],
            "played": [
                "8\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 1,
            "score": 13
        },
        {
            "input": [
                "6\u2663"
            ],
            "played": [
                "6\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 11,
            "multiplier": 1,
            "score": 11
        },
        {
            "input": [
                "5\u2660+"
            ],
            "played": [
                "5\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 40,
            "multiplier": 1,
            "score": 40
        },
        {
            "input": [
                "2\u2665+"
            ],
            "played": [
                "2\u2665+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 37,
            "multiplier": 1,
            "score": 37
        },
        {
            "input": [
                "Q\u2665x"
            ],
            "played": [
                "Q\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 5,
            "score": 75
        },
        {
            "input": [
                "2\u2663"
            ],
            "played": [
                "2\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 7,
            "multiplier": 1,
            "score": 7
        },
        {
            "input": [
                "8\u2660x"
            ],
            "played": [
                "8\u2660x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 5,
            "score": 65
        },
        {
            "input": [
                "5\u2660x"
            ],
            "played": [
                "5\u2660x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 10,
            "multiplier": 5,
            "score": 50
        },
        {
            "input": [
                "J\u2663"
            ],
            "played": [
                "J\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "Q\u2666+"
            ],
            "played": [
                "Q\u2666+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "5\u2665+"
            ],
            "played": [
                "5\u2665+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 40,
            "multiplier": 1,
            "score": 40
        },
        {
            "input": [
                "A\u2665+"
            ],
            "played": [
                "A\u2665+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 46,
            "multiplier": 1,
            "score": 46
        },
        {
            "input": [
                "6\u2666"
            ],
            "played": [
                "6\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 11,
            "multiplier": 1,
            "score": 11
        },
        {
            "input": [
                "2\u2660+"
            ],
            "played": [
                "2\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 37,
            "multiplier": 1,
            "score": 37
        },
        {
            "input": [
                "J\u2665x"
            ],
            "played": [
                "J\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 5,
            "score": 75
        },
        {
            "input": [
                "6\u2663+"
            ],
            "played": [],
            "remaining": [
                "6\u2663+"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "7\u2665"
            ],
            "played": [
                "7\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 12,
            "multiplier": 1,
            "score": 12
        },
        {
            "input": [
                "A\u2666"
            ],
            "played": [
                "A\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 16,
            "multiplier": 1,
            "score": 16
        },
        {
            "input": [
                "J\u2663+"
            ],
            "played": [
                "J\u2663+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "A\u2665x"
            ],
            "played": [
                "A\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 16,
            "multiplier": 5,
            "score": 80
        },
        {
            "input": [
                "3\u2663x"
            ],
            "played": [
                "3\u2663x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 8,
            "multiplier": 5,
            "score": 40
        },
        {
            "input": [
                "9\u2660+"
            ],
            "played": [
                "9\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 44,
            "multiplier": 1,
            "score": 44
        },
        {
            "input": [
                "2\u2660"
            ],
            "played": [
                "2\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 7,
            "multiplier": 1,
            "score": 7
        },
        {
            "input": [
                "4\u2665x"
            ],
            "played": [
                "4\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 9,
            "multiplier": 5,
            "score": 45
        },
        {
            "input": [
                "8\u2665"
            ],
            "played": [
                "8\u2665"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 1,
            "score": 13
        },
        {
            "input": [
                "5\u2663"
            ],
            "played": [
                "5\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 10,
            "multiplier": 1,
            "score": 10
        },
        {
            "input": [
                "6\u2660+"
            ],
            "played": [],
            "remaining": [
                "6\u2660+"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "10\u2660+"
            ],
            "played": [
                "10\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "7\u2660+"
            ],
            "played": [
                "7\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 42,
            "multiplier": 1,
            "score": 42
        },
        {
            "input": [
                "5\u2660"
            ],
            "played": [
                "5\u2660"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 10,
            "multiplier": 1,
            "score": 10
        },
        {
            "input": [
                "6\u2665x"
            ],
            "played": [
                "6\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 11,
            "multiplier": 5,
            "score": 55
        },
        {
            "input": [
                "7\u2660x"
            ],
            "played": [
                "7\u2660x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 12,
            "multiplier": 5,
            "score": 60
        },
        {
            "input": [
                "4\u2666"
            ],
            "played": [
                "4\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 9,
            "multiplier": 1,
            "score": 9
        },
        {
            "input": [
                "8\u2663"
            ],
            "played": [
                "8\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 1,
            "score": 13
        },
        {
            "input": [
                "6\u2660x"
            ],
            "played": [
                "6\u2660x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 11,
            "multiplier": 5,
            "score": 55
        },
        {
            "input": [
                "K\u2666"
            ],
            "played": [
                "K\u2666"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 15,
            "multiplier": 1,
            "score": 15
        },
        {
            "input": [
                "K\u2660+"
            ],
            "played": [],
            "remaining": [
                "K\u2660+"
            ],
            "hand": "Empty Hand",
            "chips": 1,
            "multiplier": 1,
            "score": 1
        },
        {
            "input": [
                "K\u2666+"
            ],
            "played": [
                "K\u2666+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 45,
            "multiplier": 1,
            "score": 45
        },
        {
            "input": [
                "8\u2665x"
            ],
            "played": [
                "8\u2665x"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 13,
            "multiplier": 5,
            "score": 65
        },
        {
            "input": [
                "9\u2663"
            ],
            "played": [
                "9\u2663"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 14,
            "multiplier": 1,
            "score": 14
        },
        {
            "input": [
                "3\u2660+"
            ],
            "played": [
                "3\u2660+"
            ],
            "remaining": null,
            "hand": "High Card",
            "chips": 38,
            "multiplier": 1,
            "score": 38
        }
    ],
    "normalized_scores": [
        1.0,
        1.0,
        0.06666666666666667,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.014285714285714285,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.016666666666666666,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.024390243902439025,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.024390243902439025,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.022222222222222223,
        1.0,
        1.0,
        1.0,
        1.0
    ]
}